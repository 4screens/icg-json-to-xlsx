// Generated by CoffeeScript 1.8.0
(function() {
  var Workbook, XLSX, datenum, findHeaders, fs, isodate, path, sheetFromArrayOfArrays, sheetFromJson, _;

  fs = require("fs");

  path = require("path");

  _ = require("lodash");

  XLSX = require('xlsx');

  isodate = require("isodate");

  datenum = function(v, date1904) {
    var epoch;
    if (date1904) {
      v += 1462;
    }
    epoch = Date.parse(v);
    return (epoch - new Date(Date.UTC(1899, 11, 30))) / (24 * 60 * 60 * 1000);
  };

  findHeaders = function(data, lookInFirst) {
    var final, headers, limit;
    limit = lookInFirst || 30;
    headers = [];
    _.each(data, function(r, i) {
      var p;
      for (p in r) {
        if (!_.contains(headers, p)) {
          headers.push(p);
        }
      }
      if (i === (limit - 1)) {
        return false;
      }
    });
    final = _.map(headers, function(h) {
      return h.replace(/^([a-z])/, function(r) {
        return r.toUpperCase();
      }).replace(/\w\_\w/g, function(r) {
        return r[0] + " " + r[2].toUpperCase();
      }).replace(/\w([A-Z])/g, function(r) {
        return r[0] + " " + r[1];
      });
    });
    return final;
  };

  sheetFromJson = function(data, opts) {
    var headers, range, ws;
    ws = {};
    range = {
      s: {
        c: 10000000,
        r: 10000000
      },
      e: {
        c: 0,
        r: 0
      }
    };
    opts = opts || {};
    if (opts.headers) {
      headers = opts.headers;
    } else {
      headers = findHeaders(data);
    }
    data.unshift(headers);
    _.each(data, function(row, R) {
      var C;
      C = 0;
      _.each(row, function(val, prop) {
        var cell, cell_ref, r;
        if (range.s.r > R) {
          range.s.r = R;
        }
        if (range.s.c > C) {
          range.s.c = C;
        }
        if (range.e.r < R) {
          range.e.r = R;
        }
        if (range.e.c < C) {
          range.e.c = C;
        }
        cell = {
          v: val
        };
        if (cell.v == null) {
          return true;
        }
        cell_ref = XLSX.utils.encode_cell({
          c: C,
          r: R
        });
        if (typeof cell.v === "number" || typeof cell.v === "'number'") {
          cell.t = "n";
        } else if (typeof cell.v === "boolean") {
          cell.t = "b";
        } else if (cell.v instanceof Date) {
          cell.t = "n";
          cell.z = XLSX.SSF._table[14];
          cell.v = datenum(cell.v);
        } else {
          r = /\d{4}\-[01]\d\-[0-3]\dT[0-2]\d\:[0-5]\d\:[0-5]\d([+-][0-2]\d:[0-5]\d|Z)/;
          if (cell.v.match(r)) {
            cell.t = "n";
            cell.z = XLSX.SSF._table[14];
            cell.v = datenum(isodate(cell.v));
          } else {
            cell.t = "s";
          }
        }
        ws[cell_ref] = cell;
        C++;
      });
    });
    if (range.s.c < 10000000) {
      ws["!ref"] = XLSX.utils.encode_range(range);
    }
    return ws;
  };

  sheetFromArrayOfArrays = function(data, opts) {
    var C, R, cell, cell_ref, range, ws;
    ws = {};
    range = {
      s: {
        c: 10000000,
        r: 10000000
      },
      e: {
        c: 0,
        r: 0
      }
    };
    R = 0;
    while (R !== data.length) {
      C = 0;
      while (C !== data[R].length) {
        if (range.s.r > R) {
          range.s.r = R;
        }
        if (range.s.c > C) {
          range.s.c = C;
        }
        if (range.e.r < R) {
          range.e.r = R;
        }
        if (range.e.c < C) {
          range.e.c = C;
        }
        cell = {
          v: data[R][C]
        };
        if (cell.v == null) {
          continue;
        }
        cell_ref = XLSX.utils.encode_cell({
          c: C,
          r: R
        });
        if (typeof cell.v === "number") {
          cell.t = "n";
        } else if (typeof cell.v === "boolean") {
          cell.t = "b";
        } else if (cell.v instanceof Date) {
          cell.t = "n";
          cell.z = XLSX.SSF._table[14];
          cell.v = datenum(cell.v);
        } else {
          cell.t = "s";
        }
        ws[cell_ref] = cell;
        ++C;
      }
      ++R;
    }
    if (range.s.c < 10000000) {
      ws["!ref"] = XLSX.utils.encode_range(range);
    }
    return ws;
  };

  Workbook = function() {
    if (!(this instanceof Workbook)) {
      return new Workbook();
    }
    this.SheetNames = [];
    this.Sheets = {};
  };

  module.exports = function(filename, data, options) {
    var opts, wb, ws;
    if (!filename || !data) {
      throw new Error("filename and data parameters are required.");
    } else {
      options || (options = {});
      if (!options.headers) {
        options.headers = findHeaders(data);
      }
      if (!options.sheetName) {
        options.sheetName = "Sheet 1";
      }
      opts = {
        headers: options.headers
      };
      wb = new Workbook();
      ws = sheetFromJson(data, opts);
      wb.SheetNames.push(options.sheetName);
      wb.Sheets[options.sheetName] = ws;
      XLSX.writeFile(wb, filename);
    }
    return filename;
  };

}).call(this);
